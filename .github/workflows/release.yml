name: Build and Release Book

on:
  # Trigger on manual dispatch
  workflow_dispatch:
  # Trigger on push to the main branch
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install dependencies
      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Install jupyterbook
        run: |
          pip install -r requirements.txt
          pip install jupyter-book

      # Build the book
      - name: Build the book
        run: |
          jupyter-book clean book
          jupyter-book build book

      # Push the book's HTML to github-pages
      - name: GitHub Pages action
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: book/_build/html

      - name: Bump version and tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          generate_release_notes: true
          files: |
            book/**/*


#      # Step 4: Deploy to GitHub Pages
#      - name: Deploy to GitHub Pages
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          publish_dir: ./book  # The directory where the book is built
#          keep_files: false    # Overwrite existing files in the gh-pages branch
#
#      # Step 5: Create a tag (if not already present)
#      - name: Get or create tag
#        id: tag
#        run: |
#          # Check if a tag already exists for this commit
#          TAG=$(git describe --tags --exact-match 2>/dev/null || true)
#          if [ -z "$TAG" ]; then
#            # If no tag exists, create one (e.g., from a VERSION file)
#            VERSION=$(cat VERSION)
#            git tag -a v$VERSION -m "Release version $VERSION"
#            git push origin v$VERSION
#            echo "Created new tag: v$VERSION"
#            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
#          else
#            echo "Using existing tag: $TAG"
#            echo "tag=$TAG" >> $GITHUB_OUTPUT
#          fi
#
#      # Step 6: Create a GitHub Release
#      - name: Create GitHub Release
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{ steps.tag.outputs.tag }}  # Use the tag created or retrieved in the previous step
#          generate_release_notes: true
#          files: |
#            book/**/*  # Include all files from the built book
